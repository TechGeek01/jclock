{"body":"# jClock\r\nThis little clock can be used as both a 12- or 24-hour display, as well as a trigger for time-based events on your website.\r\n\r\n## Implementation\r\nTo implement this script, simply stick `<script type=\"text/javascript\" src=\"https://raw.github.com/TechGeek01/jclock/master/jclock.js\"></script>` into the header of your webpage, change your `<body>` tag's  `onload` attribute to `initialSet();`, and you're good to go!\r\n\r\n## Usage\r\nTo use jClock, you can interact with the script in one of two ways.\r\n\r\n### Display a clock\r\nAdding a clock is easy. Simply set up the framework for one or more of these clocks, and jClock does the rest!\r\n> _**Hint:** It doesn't matter where you put floating clocks in the page, but due to the way jClock is set up, they will load slightly faster if they're further up on the page_\r\n\r\n* Class of `24clock` - 24-hour clock\r\n* Class of `12clock` - 12-hour clock\r\n* ID of `float24clock` - Large 24-hour clock that will stick in the bottom left corner of the window\r\n* ID of `float12clock` - Large 12-hour clock that will stick in the bottom left corner of the window\r\n* ID of `float24clock` - Large 24-hour clock with black font that will stick in the bottom left corner of the window\r\n* ID of `float12clock` - Large 12-hour clock with black font that will stick in the bottom left corner of the window\r\n\r\n### Trigger timed events\r\nIf your site has JavaScript-handled events, you can trigger them with jClock simply by nesting your action within an if statement, and using one or more of the variables `staticYear`, `staticMonth`, `staticDate`, `year`, `month`, `date`, `h24`, `m`, or `s` as the trigger.","tagline":"A simple JavaScript clock that can be used as a display on websites as well as a trigger for timed events.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"jClock","google":""}